/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Resource, } from '@opentelemetry/resources';
import { ATTR_CLOUD_PROVIDER, ATTR_CLOUD_PLATFORM, ATTR_CLOUD_REGION, ATTR_FAAS_VERSION, ATTR_FAAS_NAME, CLOUD_PROVIDER_VALUE_AWS, CLOUD_PLATFORM_VALUE_AWS_LAMBDA, } from '../semconv';
/**
 * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda
 * and return a {@link Resource} populated with data about the environment.
 * Returns an empty Resource if detection fails.
 */
var AwsLambdaDetectorSync = /** @class */ (function () {
    function AwsLambdaDetectorSync() {
    }
    AwsLambdaDetectorSync.prototype.detect = function (_config) {
        var _a;
        var functionName = process.env.AWS_LAMBDA_FUNCTION_NAME;
        if (!functionName) {
            return Resource.empty();
        }
        var functionVersion = process.env.AWS_LAMBDA_FUNCTION_VERSION;
        var region = process.env.AWS_REGION;
        var attributes = (_a = {},
            _a[ATTR_CLOUD_PROVIDER] = String(CLOUD_PROVIDER_VALUE_AWS),
            _a[ATTR_CLOUD_PLATFORM] = String(CLOUD_PLATFORM_VALUE_AWS_LAMBDA),
            _a);
        if (region) {
            attributes[ATTR_CLOUD_REGION] = region;
        }
        if (functionName) {
            attributes[ATTR_FAAS_NAME] = functionName;
        }
        if (functionVersion) {
            attributes[ATTR_FAAS_VERSION] = functionVersion;
        }
        return new Resource(attributes);
    };
    return AwsLambdaDetectorSync;
}());
export { AwsLambdaDetectorSync };
export var awsLambdaDetectorSync = new AwsLambdaDetectorSync();
//# sourceMappingURL=AwsLambdaDetectorSync.js.map